<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyCat</title>
    <url>/2022/05/16/mycat/</url>
    <content><![CDATA[<h2 id="MyCat-实现高可用读写分离分库分表"><a href="#MyCat-实现高可用读写分离分库分表" class="headerlink" title="MyCat 实现高可用读写分离分库分表"></a>MyCat 实现高可用读写分离分库分表</h2><blockquote>
<p>拦截（SQL 拦截分析&amp;查询结果拦截返回）</p>
</blockquote>
<ul>
<li>mycat：主从复制，读写分离</li>
<li>mycat-web：mycat 可视化界面</li>
<li>HAProxy：mycat 集群</li>
<li>HAProxy + Keepalived：mycat 高可用集群架构</li>
</ul>
<p><code>注</code></p>
<ul>
<li>keepalived：作用是抢占vip（虚拟IP）以提供对外服务</li>
<li>Mycat 的高可用及负载均衡由 HAProxy 来实现，而 HAProxy 的高可用由 keepalived 实现</li>
</ul>
<h2 id="MyCat-配置文件"><a href="#MyCat-配置文件" class="headerlink" title="MyCat 配置文件"></a>MyCat 配置文件</h2><ul>
<li>schema.xml：MyCat 的逻辑库、逻辑表以及对应的分片规则、DataNode以及 DataSourcec</li>
<li>server.xml：MyCat 系统配置信息。如用户名、密码及权限</li>
<li>rule.xml：拆分表的规则</li>
</ul>
<p><code>MyCat 管理端口：9066，服务端口：8066</code></p>
<span id="more"></span>

<h3 id="schema-xml-配置"><a href="#schema-xml-配置" class="headerlink" title="schema.xml 配置"></a>schema.xml 配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 1.schema：定义MyCat实例中的逻辑库 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 2.auto-sharding-long的分片规则是按ID值的范围进行分片--&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 1-5000000 为第1片 5000001-10000000 为第2片...--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 3.定义了MyCat中的数据节点,即数据分片 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db2&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db3&quot;</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 4.定义数据库实例，读写分离配置和心跳语句 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- balance 0不开启读写分离；1读写分离...--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">			  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span>		  </span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">assword</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--1.系统参数设置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="comment">&lt;!-- 20210417 设置字符集 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;charset&quot;</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--2.用户信息设置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="rule-xml"><a href="#rule-xml" class="headerlink" title="rule.xml"></a>rule.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:rule <span class="keyword">SYSTEM</span> <span class="string">&quot;rule.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:rule</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 1.tableRule配置规则 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 分片的字段为&quot;id&quot;,分片规则是&quot;rang-long&quot; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 2.&quot;rang-long&quot;的规则具体映射文件是&quot;autopartition-long.txt&quot; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:rule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="win-系统下使用-MyCat"><a href="#win-系统下使用-MyCat" class="headerlink" title="win 系统下使用 MyCat"></a>win 系统下使用 MyCat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># cmd使用管理员打开并安装</span></span></span><br><span class="line">mycat.bat install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 启动mycat服务</span></span></span><br><span class="line">mycat.bat start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 查看mycat的运行状态：</span></span></span><br><span class="line">mycat.bat status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="comment"># 停止mycat服务</span></span></span><br><span class="line">mycat.bat stop</span><br></pre></td></tr></table></figure>

<h3 id="性能监控（MyCat-Web）"><a href="#性能监控（MyCat-Web）" class="headerlink" title="性能监控（MyCat-Web）"></a>性能监控（MyCat-Web）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyCat-Web 引入 zk 作为配置中心，可以管理多个节点</span><br><span class="line"></span><br><span class="line">1. 安装 zk</span><br><span class="line">2. 启动 MyCat-Web</span><br><span class="line">3. http://localhost:8082/mycat</span><br><span class="line">4. 配置 MyCat 参数</span><br></pre></td></tr></table></figure>

<h3 id="MyCat-和-MyCat-Web-的关系图"><a href="#MyCat-和-MyCat-Web-的关系图" class="headerlink" title="MyCat 和 MyCat-Web 的关系图"></a>MyCat 和 MyCat-Web 的关系图</h3><p><code>流程：</code></p>
<ol>
<li>Java Web 项目触发数据查询（select * from user where status&#x3D;’0’）</li>
<li>MyCat Server（解析 SQL -&gt; 分片分析 -&gt; 路由分析 -&gt; 读写分离分析 -&gt; …）</li>
<li>定位到x库*表</li>
<li>MyCat Server（结果合并 -&gt; 聚合处理 -&gt; 排序处理 -&gt; 分页处理 -&gt; …）</li>
</ol>
<h2 id="MyCat-高可用架构"><a href="#MyCat-高可用架构" class="headerlink" title="MyCat 高可用架构"></a>MyCat 高可用架构</h2><h3 id="MyCat-主从读写分离"><a href="#MyCat-主从读写分离" class="headerlink" title="MyCat 主从读写分离"></a>MyCat 主从读写分离</h3><p>一主一从</p>
<h4 id="MyCat-集群部署"><a href="#MyCat-集群部署" class="headerlink" title="MyCat 集群部署"></a>MyCat 集群部署</h4><p>HAProxy 实现 MyCat 高可用</p>
<h4 id="MyCat-高可用集群部署"><a href="#MyCat-高可用集群部署" class="headerlink" title="MyCat 高可用集群部署"></a>MyCat 高可用集群部署</h4><p>keepalived 实现 HAProxy 高可用</p>
<h3 id="双主双从读写分离"><a href="#双主双从读写分离" class="headerlink" title="双主双从读写分离"></a>双主双从读写分离</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双主双从：</span><br><span class="line">    架构    ：m1 -&gt; s1   ;  m2 -&gt; s2    ;  m1 &lt;-&gt; m2 互为主备</span><br><span class="line">    读写分离 ：m1写       ;  m2,s1,s2读</span><br><span class="line">    挂机    ：m1挂掉后m2进行写</span><br><span class="line">    </span><br><span class="line">mycat主从切换问题：</span><br><span class="line">    方式1：自动切换：</span><br><span class="line">    当M宕机后， 读写S ； 恢复M后， 写S， 读M ；</span><br><span class="line">    当S宕机后， 读写M ； 恢复S后， 写M， 读S ；</span><br><span class="line">    方式2：基于MySQL主从同步状态的切换</span><br><span class="line">    MyCat检测到主从数据同步延迟，会自动切换到拥有最新数据的MySQL服务器</span><br></pre></td></tr></table></figure>

<h3 id="MyCat-分库分表架构图"><a href="#MyCat-分库分表架构图" class="headerlink" title="MyCat 分库分表架构图"></a>MyCat 分库分表架构图</h3><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: jdbc:mysql://127.0.0.1:8066/V_SHOP?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br></pre></td></tr></table></figure>

<h3 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--1.逻辑表和逻辑库设置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;V_SHOP&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--全局表--&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;areaid&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;provinceid&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_cities&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;cityid&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_dictionary&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--v_goods商品模块--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_brand&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_category&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_sku&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_spu&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v_order订单模块--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_item&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--v_log日志模块--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分表规则采用hash一致&quot;log-sharding-by-murmur&quot;规则--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_operatelog&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;log-sharding-by-murmur&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!--2.实际数据节点映射关系--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_goods&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_order&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_log&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn4&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host4&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_log&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!--3.实际数据节点设置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下面只是有的节点进行分表，并没有进行读写分离--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上面说的ip1就是指&quot;192.168.192.158&quot;,下面同理不再赘述--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span>	<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>	</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>	</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.160:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host4&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM4&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.161:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="server-xml-1"><a href="#server-xml-1" class="headerlink" title="server.xml"></a>server.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>V_SHOP<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="rule-xml-1"><a href="#rule-xml-1" class="headerlink" title="rule.xml"></a>rule.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一致性hash算法 2个库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;log-sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>log-murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;log-murmur&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/05/04/mysql/</url>
    <content><![CDATA[<h1 id="《MySQL技术精粹：架构、高级特性、型能优化与集群实战》"><a href="#《MySQL技术精粹：架构、高级特性、型能优化与集群实战》" class="headerlink" title="《MySQL技术精粹：架构、高级特性、型能优化与集群实战》"></a>《MySQL技术精粹：架构、高级特性、型能优化与集群实战》</h1><h2 id="第一章-MySQL-架构介绍"><a href="#第一章-MySQL-架构介绍" class="headerlink" title="第一章 MySQL 架构介绍"></a>第一章 MySQL 架构介绍</h2><h3 id="1-1-MySQL-架构"><a href="#1-1-MySQL-架构" class="headerlink" title="1.1 MySQL 架构"></a>1.1 MySQL 架构</h3><p>MySQL 服务器 &#x3D; SQL 层 + 存储引擎层</p>
<p>SQL 层：</p>
<ul>
<li>权限判断</li>
<li>SQL 解析</li>
<li>SQL 查询</li>
</ul>
<p>存储引擎层：完成底层数据库数据存储操作</p>
<p>MySQL 各模块特点：</p>
<ol>
<li>【连接&#x2F;线程处理】客户端连接 MySQL 数据库，主要用来处理客户端的请求、身份验证和数据库安全性验证</li>
<li>【查询缓存和查询分析器】是 SQL 层的核心部分，主要涉及查询的解析、优化、缓存，以及所有内置的函数，存储过程，触发器，视图等功能</li>
<li>【优化器】负责存储和获取所有存储在 MySQL 中的数据</li>
</ol>
<span id="more"></span>

<h4 id="1-1-1-MySQL-物理文件的组成"><a href="#1-1-1-MySQL-物理文件的组成" class="headerlink" title="1.1.1 MySQL 物理文件的组成"></a>1.1.1 MySQL 物理文件的组成</h4><blockquote>
<p>日志文件、数据文件和其他文件</p>
</blockquote>
<ol>
<li><p>日志文件：记录了数据库操作信息和错误信息。常用的日志文件包括错误日志、二进制日志、查询日志、慢查询日志和 InnoDB 引擎在线 Redo 日志</p>
<ol>
<li>错误日志（Error Log）：记录了 MySQL Server 运行过程中遇到的所有严重的错误信息，以及 MySQL 每次启动和关闭的详细信息。默认关闭</li>
<li>二进制日志（Binary Log）：即常说的 binlog。记录了 MySQL 所有修改数据库的操作，以二进制的形式记录在日志文件中，其中还包括每条语句所执行的时间和所消耗的资源以及相关的事务信息</li>
<li>查询日志（Query Log）：记录所有的查询操作</li>
<li>慢查询日志（Slow Query Log）：只所有 SQL 执行的时间超过 long_query_time 变量的语句和达到 min_examined_row_limit 条距离的语句。查看慢查询日志可以采用 mysqldumpslow 命令对慢查询日志进行分析</li>
<li>InnoDB 引擎在线 Redo 日志：记录 InnoDB 所做的所有物理变更和事务信息。通过 Redo 日志和 Undo 信息，InnoDB 大大地加强了事务的安全性。默认存放在 data 目录下</li>
</ol>
</li>
<li><p>数据文件：不同的数据库引擎，每个表的扩展名不一样，如 MyISAM 引擎用“.MYD” 作为扩展名，InnoDB 引擎使用“.idb” 作为扩展名等</p>
<ol>
<li>.frm 文件：存放与表相关的数据信息，包括表结构定义信息。当数据库奔溃时，用户可以通过 frm 文件来回复数据表结构</li>
<li>.MYD 文件：MyISAM 存储引擎创建表时，每个 MyISAM 类型的表都会有一个“.MYD”文件与之对应。用于存放数据表的数据文件</li>
<li>.MYI 文件：对于 MyISAM 存储引擎来说，用于存储表数据文件中任何索引的数据树</li>
<li>.idb 文件和 .ibdata 文件：用于存储 InnoDB 存储引擎的数据，主要包括索引信息</li>
</ol>
</li>
</ol>
<p>p41</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/08/03/redis/</url>
    <content><![CDATA[<h2 id="一、redis-概述-amp-redis-特点"><a href="#一、redis-概述-amp-redis-特点" class="headerlink" title="一、redis 概述 &amp; redis 特点"></a>一、redis 概述 &amp; redis 特点</h2><blockquote>
<p>Redis（Remote Dictionary Server）远程数据服务，是一种支持 key-value 等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供 string，hash，list，set，zset 等数据结构，基于内存，可持久化</p>
</blockquote>
<ul>
<li>丰富的数据类型：适用场景多</li>
<li>内存存储：快</li>
<li>持久化：数据安全</li>
</ul>
<h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><blockquote>
<p>redis 是 key-value 数据库，key 只能是 string，value 可以是 string、hash、list、set、 sorted set</p>
</blockquote>
<ul>
<li>string：最大存储 512m（set key_name value），信息缓存、计数器、分布式锁</li>
<li>hash：适合存储对象，key-value 集合(hset key_name field value)，购物车（用户id为key，商品id为field，商品数量为value）</li>
<li>list：字符串列表，有序可重复（lpush key_name value1.. value10），是一个分页做定时排行榜</li>
<li>set：字符串无序不可重复集合（sadd key_name value…），收藏夹</li>
<li>sorted set：有序集合（zadd key_name score value），实时排行榜</li>
</ul>
<span id="more"></span>

<h2 id="三、redis-持久化策略"><a href="#三、redis-持久化策略" class="headerlink" title="三、redis 持久化策略"></a>三、redis 持久化策略</h2><blockquote>
<p>将内存中数据存储到磁盘中</p>
</blockquote>
<ul>
<li>RDB：快照存储</li>
<li>AOF：记录写操作，追加到日志文件中，服务器重启时重新执行这些命令</li>
<li>不使用持久化</li>
<li>RDB&amp;AOF：同时开启两种持久化，redis重启时优先载入 AOP 文件来恢复原始数据，AOF中数据比RDB更加完整</li>
</ul>
<h2 id="四、redis-线程模型"><a href="#四、redis-线程模型" class="headerlink" title="四、redis 线程模型"></a>四、redis 线程模型</h2><p>redis 内部使用文件处理器，单线程架构。采用 IO 多路复用机制同时监听多个 socket，根据 socket 上的事件选择对应的事件处理器进行处理<br>单线程高效率：</p>
<ul>
<li>纯内存操作</li>
<li>核心是基于非阻塞的 IO 多路复用机制</li>
<li>单线程避免了多线程上下文切换</li>
</ul>
<h2 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h2><ul>
<li>雪崩：缓存中大批量 key 过期，请求直接落到数据库。使 key 过期时间均匀，加互斥锁，用不过期</li>
<li>穿透：恶意请求系统中不存在的数据。使用布隆过滤器（爬虫系统url去重、垃圾邮件过滤、黑名单），返回空对象</li>
<li>预热：系统上线后将缓存数据直接加载到缓存系统，避免用户请求直接落到数据库再写到缓存。工程启动时进行加载缓存动作，设置一个定时任务脚本，先保证热点数据提前加载到缓存</li>
<li>击穿：某热点 key 失效瞬间，请求直接落到数据库。增加回血缓存互斥锁，热点 key 永不过期</li>
<li>降级：指缓存失效或者服务器挂掉，不直接访问数据库，直接返回默认值或者访问服务的内存数据，避免数据库遭受巨大压力</li>
</ul>
<h2 id="六、内存淘汰机制"><a href="#六、内存淘汰机制" class="headerlink" title="六、内存淘汰机制"></a>六、内存淘汰机制</h2><blockquote>
<p>redis 缓存不足时，通过淘汰旧数据来处理新加入数据的策略</p>
</blockquote>
<ul>
<li>noeviction：默认策略，对于写请求直接返回错误</li>
<li>allkeys-lru：所有 key 最近最少使用</li>
<li>volatile-rlu：设置了过期时间的 key 最近最少使用</li>
<li>allkeys-random：所有 key 中随机淘汰</li>
<li>volatile-random：从设置了过期时间的 key 中随机淘汰</li>
<li>volatile-ttl：在设计了过期时间的 key 中根据过期时间淘汰最早过期的 key</li>
<li>allkeys-lfu：所有的 key 中，最少使用频率，4.0开始支持</li>
<li>volatile-lfu：设置了过期时间的 key 中，最少使用频率，4.0开始支持</li>
</ul>
<h2 id="七、redis事务机制"><a href="#七、redis事务机制" class="headerlink" title="七、redis事务机制"></a>七、redis事务机制</h2><blockquote>
<p>MULTI 开启，操作命令加入队列，EXEC 命令开始顺序执行。如果执行报错，不会回滚</p>
</blockquote>
<ul>
<li>WATCH：为 redis 提供 check-and-set（CAS）行为。被 WATCH 的 key 如果被改动，则 EXEC 时会返回 nil-reply</li>
<li>MULTI：开启一个事务</li>
<li>UNWATCH：取消 WATCH 命令所有的 key</li>
<li>DISCARD：放弃事务，事务列表被清空，并退出事务状态</li>
<li>EXEC：负责执行事务中所有命令</li>
</ul>
<h2 id="八、redis-主从复制"><a href="#八、redis-主从复制" class="headerlink" title="八、redis 主从复制"></a>八、redis 主从复制</h2><blockquote>
<p>指将一台 redis 服务器数据复制到其他 redis 服务器。前者为主节点（master），后者为从节点（slave）。数据的复制是单向的，只能由主到从</p>
</blockquote>
<p>主从复制作用：</p>
<ul>
<li>数据荣誉：热数据备份</li>
<li>故障恢复：主节点故障，可以由从节点提供服务</li>
<li>负载均衡：读写分离，主节点负责写数据，从节点负责读数据</li>
<li>高可用：是哨兵和集群的基础</li>
</ul>
<p>实现原理：</p>
<blockquote>
<p>三个阶段：连接建立阶段、数据同步阶段、命令传播阶段</p>
</blockquote>
<h2 id="九、哨兵（Sentinel）原理"><a href="#九、哨兵（Sentinel）原理" class="headerlink" title="九、哨兵（Sentinel）原理"></a>九、哨兵（Sentinel）原理</h2><blockquote>
<p>是 redis 高可用的实现方案，管理多个 redis 实例，实现对 redis 的监控、通知、自动故障转移</p>
</blockquote>
<p>问题引入：redis 主从负责模式下，一旦主节点故障无法提供服务，需要手动将从节点晋升为主节点，还需要通知客户端更新主节点地址，这个故障处理方案是不可取的</p>
<h2 id="十、-memcache-amp-redis-区别"><a href="#十、-memcache-amp-redis-区别" class="headerlink" title="十、 memcache &amp; redis 区别"></a>十、 memcache &amp; redis 区别</h2><ul>
<li>memcache 纯内存，数据量不能超过内存，redis 支持持久化</li>
<li>memcache 只支持 string，redis 支持多种</li>
</ul>
<h2 id="十一、客户端"><a href="#十一、客户端" class="headerlink" title="十一、客户端"></a>十一、客户端</h2><ul>
<li>Jedis</li>
<li>Redisson</li>
<li>Lettuce</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>react</title>
    <url>/2021/12/25/react/</url>
    <content><![CDATA[<blockquote>
<p>用于构建用户界面的 JavaScript 库</p>
</blockquote>
<h2 id="一、Hello-World"><a href="#一、Hello-World" class="headerlink" title="一、Hello World"></a>一、Hello World</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>wudiguang-index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>( element,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、JSX-简介"><a href="#二、JSX-简介" class="headerlink" title="二、JSX 简介"></a>二、JSX 简介</h2><blockquote>
<p>是一个 JavaScript 的语法扩展</p>
</blockquote>
<h3 id="2-1-例子"><a href="#2-1-例子" class="headerlink" title="2.1 例子"></a>2.1 例子</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-嵌入表达式"><a href="#2-2-嵌入表达式" class="headerlink" title="2.2 嵌入表达式"></a>2.2 嵌入表达式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh Perez&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>JSX 语法中：大括号内防止任何有效的 JavaScript 表达式，如 <code>2+2</code>, <code>user.firstName</code> 或者 <code>formatName(user)</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="三、元素渲染"><a href="#三、元素渲染" class="headerlink" title="三、元素渲染"></a>三、元素渲染</h2><p><strong>将一个元素渲染为 DOM</strong></p>
<p>我们将其称为“根” DOM 节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>更新已渲染的元素</strong></p>
<blockquote>
<p>daduoshu1 React<br> 大多数 React 应用只会调用一次 ReactDOM.render()</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>())</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每秒执行一次</span></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-1-React-只更新它需要更新的部分"><a href="#3-1-React-只更新它需要更新的部分" class="headerlink" title="3.1 React 只更新它需要更新的部分"></a>3.1 React 只更新它需要更新的部分</h3><blockquote>
<p>React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态</p>
</blockquote>
<h2 id="四、组件-amp-Props"><a href="#四、组件-amp-Props" class="headerlink" title="四、组件 &amp; Props"></a>四、组件 &amp; Props</h2><blockquote>
<p>组件允许将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思</p>
</blockquote>
<h3 id="4-1-函数组件与-class-组件"><a href="#4-1-函数组件与-class-组件" class="headerlink" title="4.1 函数组件与 class 组件"></a>4.1 函数组件与 class 组件</h3><p><code>该JS函数定义 React 组件，接收唯一参数 props，并返回 React 元素</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ES6 的 class</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-渲染组件"><a href="#4-2-渲染组件" class="headerlink" title="4.2 渲染组件"></a>4.2 渲染组件</h3><p>React 元素可以是 DOM 标签，也可以是用户自定义的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<p>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性以及子组件转换为单个对象传递给组件，这个对象被称为 “props”</p>
<p>如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol>
<li>调用 ReactDOM.render() 函数，并传入 <code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code>作为参数</li>
<li>React 调用 <code>Welcome</code> 组件，并将 <code>&#123;name: &#39;Sara&#39;&#125;</code> 作为 props 传入</li>
<li><code>Welcome</code> 组件将 <code>&lt;h1&gt;Hello,Sara&lt;/h1&gt;</code>元素作为返回值</li>
<li>React DOM 将 DOM 高效地更新为 <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code></li>
</ol>
<p>注意：组件名称必须以大写字母开头</p>
<h3 id="4-3-组合组件"><a href="#4-3-组合组件" class="headerlink" title="4.3 组合组件"></a>4.3 组合组件</h3><blockquote>
<p>组件可以在其输出中引用其他组件</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Cahal&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Edite&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="4-4-提取组件"><a href="#4-4-提取组件" class="headerlink" title="4.4 提取组件"></a>4.4 提取组件</h3><blockquote>
<p>将组件拆分为更小的组件</p>
</blockquote>
<p>例如，如下 <code>Component</code> 组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;Avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;props.author.avatarUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#123;props.author.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.author.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于复杂嵌套关系，难以维护且难以复用，因此可以提取一些组件出来</p>
<p><code>Avatar</code> 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;Avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">src</span>=<span class="string">&#123;props.user.avatarUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">alt</span>=<span class="string">&#123;props.user.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步提取 <code>UserInfo</code> 组件，该组件在用户名旁渲染 <code>Avatar</code> 组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserInfo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">user</span>=<span class="string">&#123;props.user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.user.name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步简化 <code>Component</code> 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserInfo</span> <span class="attr">user</span>=<span class="string">&#123;props.author&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-Props-的只读性"><a href="#4-5-Props-的只读性" class="headerlink" title="4.5 Props 的只读性"></a>4.5 Props 的只读性</h3><blockquote>
<p>组件无论是使用函数声明还是通过 class 声明，都绝不能修改自身的 props</p>
</blockquote>
<p><code>sum</code> 函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的函数被称为”纯函数”，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果</p>
<p>相反，下面的函数则不是纯函数，它更改了自己的入参</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">account, amount</span>) &#123;</span><br><span class="line">  account.<span class="property">total</span> -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改</code></p>
<h2 id="五、State-amp-生命周期"><a href="#五、State-amp-生命周期" class="headerlink" title="五、State &amp; 生命周期"></a>五、State &amp; 生命周期</h2><p><a href="https://react.docschina.org/docs/react-component.html">详细</a></p>
<p>上一章节中时钟的例子中，我们通过调用 <code>ReactDOM.render()</code> 来修改我们想要渲染的元素：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    element,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>尝试真正复用 <code>Clock</code> 组件，它将设置自己的计时器并每秒更新一次</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Clock</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> <span class="attr">date</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()&#125; /&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-1-将函数组件转换成-class-组件"><a href="#5-1-将函数组件转换成-class-组件" class="headerlink" title="5.1 将函数组件转换成 class 组件"></a>5.1 将函数组件转换成 class 组件</h3><p>通过以下五步将 <code>Clock</code> 的函数组件转换成 class 组件：</p>
<ol>
<li>创建一个同名的 ES6 class，并且继承于 React.Component</li>
<li>添加一个空的 <code>render()</code> 方法</li>
<li>将函数体移动到 <code>render()</code> 方法中</li>
<li>在 <code>render()</code> 方法中使用 <code>this.props</code> 替换 <code>props</code> </li>
<li>删除剩余的空函数声明</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在 <code>Clock</code> 组件被定义为 class，而不是函数</p>
<p>每次组件更新时 <code>render</code> 方法都会被调用，但只要在相同的 DOM 节点中渲染 <code>&lt;Clock /&gt;</code>，就仅有要给 <code>Clock</code> 组件的 class 实例被创建使用。</p>
<h3 id="5-2-向-class-组件中添加局部的-state"><a href="#5-2-向-class-组件中添加局部的-state" class="headerlink" title="5.2 向 class 组件中添加局部的 state"></a>5.2 向 class 组件中添加局部的 state</h3><ol>
<li>把 <code>render()</code> 方法中的 <code>this.props.date</code> 替换成 <code>this.state.date</code>:</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加一个 class 构造函数，然后在该函数中为 <code>this.state</code> 赋初值:</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以下方式将 <code>props</code> 传递到父类的构造函数中：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>Clas 组件应该始终使用 <code>props</code> 参数来调用父类的构造函数</p>
<ol start="3">
<li>移除 <code>&lt;Clock /&gt;</code>元素中的 <code>date</code>属性：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>接下来设置 <code>Clock</code> 的计时器并每秒更新它</p>
<h3 id="5-3-将生命周期方法添加到-Class-中"><a href="#5-3-将生命周期方法添加到-Class-中" class="headerlink" title="5.3 将生命周期方法添加到 Class 中"></a>5.3 将生命周期方法添加到 Class 中</h3><p>当 <code>Clock</code> 组件第一次被渲染到 DOM 中的时候，就为其设置一个计时器，这在 React 中被称为“挂载(mount)”<br>当 DOM 中 <code>Clock</code> 组件被删除时，应该清楚定时器，这被称为“卸载(unmount)”</p>
<p>我们可以为 class 组件声明一些特殊方法，当组件挂载或卸载时就会去执行这些方法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>这些方法叫做生命周期方法</code></p>
<p><code>componentDidMount()</code> 方法会在组件已经被渲染到 DOM 中后运行，所以最好在这里设置计时器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timerID</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tick</span>(),</span><br><span class="line">        <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们会在 <code>componentWillUnmount</code> 生命周期方法中清除计时器：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerID</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>完整例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 构造方法，初始化state中的date属性</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件渲染到 DOM 中后运行</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 设置计时器  </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timerID</span> = <span class="built_in">setInterval</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tick</span>(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清除计时器</span></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timerID</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置state中的date属性  </span></span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>细节:</p>
<ol>
<li>当<code>&lt;Clock /&gt;</code> 被传给 <code>ReactDOM.render()</code> 时，React 会调用 <code>Clock</code> 组件的构造函数。同时初始化 <code>this.state</code></li>
<li>之后 React 会调用组件的 <code>render()</code>方法。即 React 确定该在页面上展示什么的方式</li>
<li>当 <code>Clock</code> 的输出被插入到 DOM 中后，React 就会调用 <code>ComponentDidMount()</code> 方法，这个方法中 <code>Clock</code> 组件向浏览器请求设置一个计时器来每秒调用一次组件的 <code>tick()</code> 方法</li>
<li>浏览器每秒都会调用一次 <code>tick()</code> 方法，这个方法中会通过调用 <code>setState()</code> 来更新 date 属性，React 知道 state 改变后会重新调用 <code>render()</code> 方法，将重新加载 <code>state</code> 的值</li>
<li>一旦 <code>Clock</code> 组件从 DOM 中被移除，React 就会调用 <code>componentWillUnmount()</code>方法，这样计时器就会停止</li>
</ol>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2022/05/04/test/</url>
    <content><![CDATA[<h1 id="测试文档"><a href="#测试文档" class="headerlink" title="测试文档"></a>测试文档</h1><h2 id="我是二级标签"><a href="#我是二级标签" class="headerlink" title="我是二级标签"></a>我是二级标签</h2><h3 id="我是三级标签"><a href="#我是三级标签" class="headerlink" title="我是三级标签"></a>我是三级标签</h3>]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper</title>
    <url>/2021/08/05/zookeeper/</url>
    <content><![CDATA[<h2 id="一、zookeeper-入门"><a href="#一、zookeeper-入门" class="headerlink" title="一、zookeeper 入门"></a>一、zookeeper 入门</h2><h3 id="1-1-zookeeper-概述"><a href="#1-1-zookeeper-概述" class="headerlink" title="1.1 zookeeper 概述"></a>1.1 zookeeper 概述</h3><blockquote>
<p>zk 是一个开源的分布式协调服务，将复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，提供给用户使用</p>
</blockquote>
<p>zk 提供了高可用、高性能、稳定的分布式数据一致性解决方案。通常被用于实现数据发布&#x2F;订阅、负载均衡、命名服务、分布式协调&#x2F;通知、集群管理、master 选举、分布式锁和分布式队列等功能</p>
<p>另外，zk 将数据保存在内存中，性能很nice</p>
<h3 id="1-2-zk-特点"><a href="#1-2-zk-特点" class="headerlink" title="1.2 zk 特点"></a>1.2 zk 特点</h3><ul>
<li>顺序一致性：客户端发起的事务，按照顺序被应用到 zk 中</li>
<li>原子性：事务请求，对集群中所有的及其应用情况是一样的，要么都成功，要么都失败</li>
<li>单一系统映像：zk 集群保证查询到的数据都是一致的</li>
<li>可靠性：一旦更改请求被应用，数据将持久化</li>
</ul>
<span id="more"></span>

<h3 id="1-3-应用场景"><a href="#1-3-应用场景" class="headerlink" title="1.3 应用场景"></a>1.3 应用场景</h3><ul>
<li>分布式锁：通过创建唯一节点获得分布式锁，当获得锁的一方执行完或者挂掉后就释放锁</li>
<li>命名服务：通过 zk 的顺序节点生成全局唯一 ID</li>
<li>数据发布&#x2F;订阅：通过 Watch 机制，实现数据发布&#x2F;订阅。数据被发布到 zk 的被监听的节点上，其他及其可以通过监听该节点来实现配置的动态更新</li>
</ul>
<blockquote>
<p>开源项目使用 zk：kafka、hbase、hadoop</p>
</blockquote>
<h2 id="二、zk-重点"><a href="#二、zk-重点" class="headerlink" title="二、zk 重点"></a>二、zk 重点</h2><blockquote>
<p>zk 主要是用来协调服务的，不是用来存储业务数据的，不能将大数据放在 zk 中</p>
</blockquote>
<h3 id="2-1-Data-model（数据模型）"><a href="#2-1-Data-model（数据模型）" class="headerlink" title="2.1 Data model（数据模型）"></a>2.1 Data model（数据模型）</h3><blockquote>
<p>类 Linux 系统中文件系统，树形结构</p>
</blockquote>
<h3 id="2-2-znode（数据节点）"><a href="#2-2-znode（数据节点）" class="headerlink" title="2.2 znode（数据节点）"></a>2.2 znode（数据节点）</h3><blockquote>
<p>zk 中最小数据单位</p>
</blockquote>
<ul>
<li>持久节点：持久化，直到被删除</li>
<li>临时节点：生命周期为 和客户端绑定（session），会话消失则节点被删除，临时节点只能做叶子节点，不能创建子节点</li>
<li>持久顺序节点：有序（如 &#x2F;node1&#x2F;app000000001）</li>
<li>临时顺序节点：有序</li>
</ul>
<p>znode 数据结构</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stat&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;状态信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;节点存放的内容&quot;</span>   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>stat 中数据信息</strong></p>
<p>cZxid:create ZXID，即该数据节点被创建时的事务 id<br>ctime:create time，即该节点的创建时间<br>mZxid:modified ZXID，即该节点最终一次更新时的事务 id<br>mtime:modified time，即该节点最后一次的更新时间<br>pZxid:该节点的子节点列表最后一次修改时的事务 id，只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新<br>cversion:子节点版本号，当前节点的子节点每次变化时值增加 1<br>dataVersion:数据节点内容版本号，节点创建时为 0，每更新一次节点内容(不管内容有无变化)该版本号的值增加 1<br>aclVersion:节点的 ACL 版本号，表示该节点 ACL 信息变更次数<br>ephemeralOwner:创建该临时节点的会话的 sessionId；如果当前节点为持久节点，则 ephemeralOwner&#x3D;0<br>dataLength:数据节点内容长度<br>numChildren:当前节点的子节点个数</p>
<h3 id="2-3-ACL（权限控制）"><a href="#2-3-ACL（权限控制）" class="headerlink" title="2.3 ACL（权限控制）"></a>2.3 ACL（权限控制）</h3><p>对于 znode 的操作权限</p>
<ul>
<li>CREATE：支持创建子节点</li>
<li>READ：能查询节点数据和列出子节点</li>
<li>WRITE：能设置&#x2F;更新节点数据</li>
<li>DELETE：能删除子节点</li>
<li>ADMIN：能设置节点 ACL 的权限</li>
</ul>
<p><code>CREATE 和 DELETE 都是对子节点的控制权限</code><br> 对于身份认证，提供以下几种方式：</p>
<ul>
<li>world：默认，any user can use</li>
<li>auth：任何已认证用户</li>
<li>digest： username：password</li>
<li>ip：对指定 IP 限制</li>
</ul>
<h3 id="2-4-Watcher（事件监听器）"><a href="#2-4-Watcher（事件监听器）" class="headerlink" title="2.4 Watcher（事件监听器）"></a>2.4 Watcher（事件监听器）</h3><blockquote>
<p>允许节点注册 Watch，在某些特定事件触发时，zk 服务端会将事件通知到感兴趣的客户端</p>
</blockquote>
<h3 id="2-5-Session（会话）"><a href="#2-5-Session（会话）" class="headerlink" title="2.5 Session（会话）"></a>2.5 Session（会话）</h3><blockquote>
<p>可以看作是 zk 与客户端之间的 TCP 长连接</p>
</blockquote>
<p>Session：sessionTimeout 会话超时时间（范围内，仍属于同一个 session）<br>zk 与客户端创建 session 之前，会为客户端分配一个 sessionID，全局唯一</p>
<h2 id="三、zk-集群"><a href="#三、zk-集群" class="headerlink" title="三、zk 集群"></a>三、zk 集群</h2><blockquote>
<p>为了保证高可用，zk 需集群部署，只要集群中大部分机器可用，则集群可用。集群间通过 ZAB（zk Atomic Broadcase） 保证数据一致性</p>
</blockquote>
<p>典型集群模式：Master&#x2F;Slave（主从模式）</p>
<h3 id="3-1-zk-集群中角色"><a href="#3-1-zk-集群中角色" class="headerlink" title="3.1 zk 集群中角色"></a>3.1 zk 集群中角色</h3><blockquote>
<p>Leader,Follower,Observer</p>
</blockquote>
<ul>
<li>Leader：提供读写，负责投票的发起和决议，更新系统状态</li>
<li>Follower：提供读，参与选举投票，转发写请求给 Leader</li>
<li>Observer：提供读，不参与 Leader 选举</li>
</ul>
<p><strong>leader写数据</strong></p>
<p><strong>读数据</strong></p>
<p>当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况，就会进入 Leader 选举过程</p>
<ol>
<li>Leader election（选举阶段）：只要一个节点得到超过半数节点的票数，则可成为 Leader</li>
<li>Discovery（发现阶段）：Follower 与准 Leader 通信，同步 Follower 最近接收的事务提议</li>
<li>Synchronization（同步阶段）：利用 Leader 前一阶段获得的最新提议历史，同步集群所有的副本。同步完成准 Leader 成为 Leader</li>
<li>Broadcase（广播阶段）：zk 集群正式对外提供事务服务，Leader 可以进行消息广播。若有新节点加入，需对新节点进行同步</li>
</ol>
<h3 id="3-2-zk-集群中服务状态"><a href="#3-2-zk-集群中服务状态" class="headerlink" title="3.2 zk 集群中服务状态"></a>3.2 zk 集群中服务状态</h3><ul>
<li>LOOKING：寻找 Leader</li>
<li>LEADING：Leader 状态，对应的节点为 Leader</li>
<li>FOLLOWING：Follower 状态，对应节点为 Follower</li>
<li>OBSERVING：Observer 状态，对应节点为 Observer，不参与 Leader 选举</li>
</ul>
<h3 id="3-3-zk-集群数量"><a href="#3-3-zk-集群数量" class="headerlink" title="3.3 zk 集群数量"></a>3.3 zk 集群数量</h3><blockquote>
<p>zk 集群，服务器剩余数量大于宕机数量才能继续提供服务。即 2n 和 2n-1 的容忍度是一样的</p>
</blockquote>
<h3 id="3-4-zk-选举的过半机制防止脑裂"><a href="#3-4-zk-选举的过半机制防止脑裂" class="headerlink" title="3.4 zk 选举的过半机制防止脑裂"></a>3.4 zk 选举的过半机制防止脑裂</h3><blockquote>
<p>为保证 zk 集群可用性，服务器通常部署在不同机房，如果机房间网络线路故障，集群被割裂成几个小集群</p>
</blockquote>
<p>过半机制防止脑裂：服务器少于等于一般不可能产生 Leader</p>
<h2 id="四、ZAB-协议和-Paxos-算法"><a href="#四、ZAB-协议和-Paxos-算法" class="headerlink" title="四、ZAB 协议和 Paxos 算法"></a>四、ZAB 协议和 Paxos 算法</h2><h3 id="4-1-ZAB-协议简介"><a href="#4-1-ZAB-协议简介" class="headerlink" title="4.1 ZAB 协议简介"></a>4.1 ZAB 协议简介</h3><blockquote>
<p>ZAB（zk Atomic Broadcast 原子广播）协议是 zk 专门设计的一种支持崩溃恢复的原子广播协议。zk 中主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，zk 实现了一种主备模式的系统架构来保持集群中各个副本之间数据一致性</p>
</blockquote>
<p>ZAB 协议两种基本的模式：崩溃恢复和消息广播</p>
<ul>
<li>崩溃恢复：当服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常时，ZAB 协议就会进入恢复模式并选举新的 Leader。当选举产生了新的 Leader，切已经有过半的机器与 Leader 完成了状态同步后，ZAB 协议就会退出恢复模式。状态同步即数据同步，用来保证集群中存在过半的及其的数据与 Leader 一致</li>
<li>消息广播：当一台遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在 Leader 在负责进行消息广播，则新加入的服务器会自觉进入数据恢复模式，找到 Leader，进行数据同步</li>
</ul>
<p><strong>选举算法：FastLeaderElection</strong></p>
<ul>
<li>myid：每个 zk 服务器在数据文件夹下创建名为 myid 的文件，内容全局唯一整数 ID</li>
</ul>
<h2 id="五、常用命令"><a href="#五、常用命令" class="headerlink" title="五、常用命令"></a>五、常用命令</h2><ol>
<li>help</li>
<li>create</li>
<li>set</li>
<li>get</li>
<li>ls</li>
<li>stat</li>
<li>ls2（ls + stat）</li>
<li>delete</li>
</ol>
<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ol>
<li>zk 是分布式程序（半数以上节点存活则 zk 能正常提供服务）</li>
<li>zk 数据保存在内存中</li>
<li>zk 是高性能</li>
<li>zk 中持久节点&amp;临时节点</li>
<li>zk 底层提供两个功能：管理（存取）程序数据、为用户提供数据节点的监听</li>
</ol>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2022/05/16/ceshi/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
